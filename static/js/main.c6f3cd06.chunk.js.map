{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["tileCount","TileData","id","emoji","mask","this","matched","isOpen","getRandomNumber","min","max","Math","floor","random","Tile","props","tile","onClick","e","className","Board","console","log","tiles","map","index","key","x","React","Component","App","state","name","click1TileId","click2TileId","clickCounter","maxTileCount","width","window","innerWidth","height","innerHeight","rows","length","calculateTileCount","emojis1","split","splice","emojis2","slice","randomNumberToPop","emojiToPlace","push","setState","tileId","clickEventId","updatedTiles","event","target","warn","matchTiles","addEventListener","buildTileData","removeEventListener","handleClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c6f3cd06.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n// import '../public/w3.css';\n\nlet tileCount = 0;\n\nclass TileData {\n  id;\n  matched;\n  emoji;\n  mask;\n\n  constructor(id, emoji, mask) {\n    this.id = id;\n    this.matched = false;\n    this.emoji = emoji;\n    this.mask = mask;\n    this.isOpen = false;\n  }\n}\n\nconst getRandomNumber = (min, max) => Math.floor((Math.random() * max) + min);\n\nfunction Tile(props) {\n  // console.log(\"rendering tile\");\n\n  // console.log(props);\n  return (\n    <button id={props.tile.id} onClick={(e) => props.onClick(e)} className={props.tile.matched ? \"item\" : \"item\"}>{(props.tile.isOpen) ? props.tile.emoji : props.tile.mask}</button>\n  );\n}\n\nclass Board extends React.Component {\n\n  constructor(props) {\n    console.log(\"rendering body\");\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className={\"container\"}>\n        {this.props.tiles.map((tile, index) => { return <Tile key={index} tile={tile} onClick={(x) => this.props.onClick(x)}></Tile> })}\n      </div>\n    );\n\n  };\n\n\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"dilli\",\n      click1TileId: -1,\n      click2TileId: -1,\n      clickCounter: 0,\n      maxTileCount: 40,\n      tiles: [],\n    }\n  }\n\n  calculateTileCount() {\n    console.log(\"calulating tile count\");\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    let rows = 5;\n\n    if (height > 900) {\n      console.log(height, \"desktop h\");\n      rows = 12;\n    }\n    else if (height > 801 && height <= 899) {\n      console.log(height, \"tablets h\");\n      rows = 10;\n    }\n    else if (height > 641 && height <= 800) {\n      console.log(height, \"ipad h\");\n      rows = 8;\n    }\n    else if (height > 481 && height <= 640) {\n      console.log(height, \"phone h\");\n      rows = 8;\n    }\n    else if (height > 320 && height <= 480) {\n      console.log(height, \"phone h\");\n      rows = 6;\n    }\n    else {\n      console.log(height, \"unknown phone h\")\n      rows = 5;\n    }\n\n\n    if (width > 1025) {\n      console.log(width, \"desktop w\");\n      tileCount = 15 * rows;\n    }\n    else if (width > 801 && width <= 1024) {\n      console.log(width, \"tablets w\");\n      tileCount = 12 * rows;\n    }\n    else if (width > 641 && width <= 800) {\n      console.log(width, \"ipad w\");\n      tileCount = 10 * rows;\n    }\n    else if (width > 320 && width <= 640) {\n      console.log(width, \"phone w\");\n      tileCount = 5 * rows;\n    }\n    else {\n      console.log(width, \"unknown phone w\")\n      tileCount = 5 * rows;\n    }\n    console.log(\"new tile count\", tileCount);\n    return tileCount % 2 === 0 ? tileCount : tileCount + 1;\n  }\n\n  buildTileData() {\n    let length = this.calculateTileCount();\n    console.log(\"build tile data\", length);\n    const tiles = [];\n    const mask = \"😜\";\n    const baseEmojis = `\n    🔥,🙈,❤️,🐶,🦊,🦁,🦚,🦩,💣,🎈,💎,☎️,🗿,🍉,🍋,🍎,🥭,🍕,🍟,🎂,🐬,\n    🦋,🌷,🍁,🌞,🌈,🏝️,⚽,🎭,😍,🤠,🤡,👻,👸,🧙,🧞,🦄,🍫,🍭,💐,🌊,\n    🧙‍♀️,🧚‍♀️,🧞‍♀️,🐘,🐰,🐻,🐨,🐧,🕊️,🦢,🦜,🐢,🦈,🐝,🐞,🌊,☃️,🌜,🍀,🦀,🌻,\n    💌,🧭,⌛,⛱️,🧨,🎀,🎁,🪁,🧸,🔋,🔑,🔒,🔫,🧲,🛒,🧛‍♀️,👩‍🍳,🤗,👽,🥺\n    `.split(\",\");\n    const emojis1 = baseEmojis.splice(0, length / 2);\n    const emojis2 = emojis1.slice();\n\n    for (var index = 0; index < length; index++) {\n      let randomNumberToPop = emojis1.length !== 0 ? getRandomNumber(0, emojis1.length) : getRandomNumber(0, emojis2.length);\n      let emojiToPlace = emojis1.length !== 0 ? emojis1[randomNumberToPop] : emojis2[randomNumberToPop];\n      // since we can't pop element at index, we are splicing element at index\n      emojis1.length !== 0 ? emojis1.splice(randomNumberToPop, 1) : emojis2.splice(randomNumberToPop, 1);\n      tiles.push(new TileData(index, emojiToPlace, mask));\n    }\n\n    // console.log(\"\");\n    this.setState({ tiles: tiles }, () => console.log(\"tiles are built by builder\"));\n  }\n\n  matchTiles(tileId, clickEventId) {\n    console.log(\"made copy of tiles\");\n    var updatedTiles = this.state.tiles.slice();\n    updatedTiles[tileId].isOpen = true;\n\n\n    console.log(\"matchig tiles\", this.state.click1TileId, this.state.click2TileId);\n    if (this.state.click1TileId !== -1 && this.state.click2TileId !== -1) {\n      if (this.state.tiles[this.state.click1TileId].emoji === this.state.tiles[this.state.click2TileId].emoji) {\n        updatedTiles[this.state.click1TileId].matched = true;\n        updatedTiles[this.state.click2TileId].matched = true;\n        console.log(\"tile matched\");\n        this.setState({ click1TileId: -1, click2TileId: -1 }, () => console.log(\"matched tiles closed\"));\n      }\n      else {\n        console.log(\"tile not matched\");\n        updatedTiles[this.state.click1TileId].matched = false;\n        updatedTiles[this.state.click2TileId].matched = false;\n\n\n        // this.setState({ click1TileId: -1}, ()=> console.log(\"click1 tile closed\"));\n        if (this.state.clickCounter % 2 === 1) {\n          this.setState({ click2TileId: -1 }, () => console.log(\"click1 tile closed\"));\n          updatedTiles[this.state.click2TileId].isOpen = false;\n\n        } else {\n          updatedTiles[this.state.click1TileId].isOpen = false;\n          this.setState({ click1TileId: -1 }, () => console.log(\"click1 tile closed\"));\n        }\n      }\n    } else {\n      console.log(\"tile match cancelled\");\n    }\n    this.setState({ tiles: updatedTiles }, () => {\n      console.log(\"tiles updated for click event id\", clickEventId);\n      console.log(\"##################################################\");\n    });\n  }\n\n  handleClick(event) {\n    const tileId = event.target.id;\n\n    if (this.state.tiles[tileId].isOpen) {\n      console.warn(\"click on invalid tile\");\n      return;\n    }\n\n    this.setState({ clickCounter: this.state.clickCounter + 1 }, () => {\n\n      console.log(\"******************************************************\");\n      console.log(\"for click id\", this.state.clickCounter, this.state.clickCounter % 2, this.state.clickCounter % 2 === 0);\n\n      if (this.state.clickCounter % 2 === 1) {\n        console.log(\"seting click1 tile id\");\n        this.setState({ click1TileId: tileId }, () => {\n          console.log(\"click1tileid set\");\n          this.matchTiles(tileId, this.state.clickCounter)\n        });\n      } else {\n        console.log(\"seting click2 tile id\");\n        this.setState({ click2TileId: tileId }, () => {\n          console.log(\"click2tileid set\");\n          this.matchTiles(tileId, this.state.clickCounter)\n        });\n      }\n\n    });\n\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', () => {\n      console.log(\"window resize\");\n      this.buildTileData();\n    });\n    window.addEventListener('load', () => {\n      console.log(\"window resize\");\n      this.buildTileData();\n    });\n\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', () => {\n      console.log(\"window resize\");\n      this.buildTileData();\n    });\n    window.addEventListener('load', () => {\n      console.log(\"window resize\");\n      this.buildTileData();\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <header>click Counter: {this.state.clickCounter}</header>\n        <header>click1TileId: {this.state.click1TileId}</header>\n        <header>click2TileId: {this.state.click2TileId}</header>\n        <header>is open for Clickcount: {this.state.clickCounter % 2 === 0 ? \"No\" : \"Yes\"}</header> */}\n        <Board className={\"center-me\"} tiles={this.state.tiles} onClick={(x) => this.handleClick(x)} ></Board>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}